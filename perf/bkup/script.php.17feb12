<?php
function ChkPath($CUS,$HOST)
{
   
   $objConnect = mysql_connect("localhost",$_SESSION["MUSER"],$_SESSION["MPASS"]) or die("Error Connect to Database");
   $objDB = mysql_select_db("perf");
   mysql_query("SET NAMES UTF8");
   $strSQL="SELECT gname FROM servergroup,serverdetail WHERE cname='$CUS' and server='$HOST' and servergroup.gid=serverdetail.gid";
   $Query=mysql_query($strSQL) or die ("Error Query [".$strSQL."]");
   $Result = mysql_fetch_array($Query);
   if ($Result){
	if(!file_exists("customer/$CUS/".$Result["gname"])) { mkdir("customer/$CUS/".$Result["gname"]); }
	if(!file_exists("customer/$CUS/".$Result["gname"]."/$HOST")) { mkdir("customer/$CUS/".$Result["gname"]."/$HOST"); }
	if(!file_exists("customer/$CUS/".$Result["gname"]."/$HOST/tmp")) { mkdir("customer/$CUS/".$Result["gname"]."/$HOST/tmp"); }
	
	return "customer/$CUS/".$Result["gname"]."/$HOST";
   }else{
	return 0;
   }

}
function CallScriptCPU($PATH,$HOST,$MONTH,$YEAR,$SCRIPT)
{
        echo "  - Start script : $SCRIPT.sh :";
        $start= date("G:i:s");
        echo $start;
        $arrS = explode(":",$start);
        copy("scripts/$SCRIPT.sh","$PATH/tmp/sar-u/$SCRIPT.sh");
        echo shell_exec("cd ".getcwd()."/$PATH/tmp/sar-u;sh ./$SCRIPT.sh");
        $finish= date("G:i:s");
        echo " - $finish";
        $arrF = explode(":",$finish);
        echo " spend time = ".date("i.s",mktime(0,$arrF[1]-$arrS[1],$arrF[2]-$arrS[2],0,0,0))." minutes<br/>";
        copy("$PATH/tmp/sar-u/$SCRIPT.out","$PATH/$YEAR/$MONTH/$HOST.$MONTH.$YEAR.$SCRIPT.out");

}
function GenGraph($PATH,$HOST,$MONTH,$YEAR)
{

  // Standard inclusions   
  include("pChart2.1.3/class/pData.class.php");
  include("pChart2.1.3/class/pDraw.class.php");
  include("pChart2.1.3/class/pImage.class.php");
  $WIDTH=950;
  $HEIGH=370;

////////////////////////// utilize 

  // Dataset definition 
  $DataSet = new pData;
  $DataSet->importFromCSV("$PATH/$HOST.$MONTH.$YEAR.utilize.out",array("Delimiter"=>"\t","GotHeader"=>TRUE,"SkipColumns"=>array(4,6)));
  $DataSet->setAxisName(0,"CPU performance");
  
  /* Bind a data serie to the X axis */
  $DataSet->setAbscissa("DATE");
  //print_r($DataSet->getData());

  /* Normalize the data series to 100% */ 

  // Initialise the graph
  $Test = new pImage($WIDTH,$HEIGH,$DataSet);

  /* Draw the background */ 
 $Settings = array("R"=>170, "G"=>183, "B"=>87, "Dash"=>1, "DashR"=>190, "DashG"=>203, "DashB"=>107); 
 $Test->drawFilledRectangle(0,0,$WIDTH,$HEIGH,$Settings); 

 /* Overlay with a gradient */ 
 $Test->drawGradientArea(0,0,$WIDTH,$HEIGH,DIRECTION_VERTICAL,array("StartR"=>220,"StartG"=>220,"StartB"=>220,"EndR"=>255,"EndG"=>255,"EndB"=>255,"Alpha"=>100));


  /* Add a border to the picture */ 
 $Test->drawRectangle(0,0,$WIDTH-1,$HEIGH-1,array("R"=>100,"G"=>100,"B"=>100));

  
 /* Write the chart title */  
 $Test->setFontProperties(array("FontName"=>"pChart2.1.3/fonts/Forgotte.ttf","FontSize"=>11));
 $Test->drawText($WIDTH/2,35,"CPU utilize by date at $MONTH-$YEAR on $HOST",array("FontSize"=>20,"Align"=>TEXT_ALIGN_MIDDLEMIDDLE));


 /* Set the default font */ 
 $Test->setFontProperties(array("FontName"=>"pChart2.1.3/fonts/verdana.ttf","FontSize"=>7,"R"=>0,"G"=>0,"B"=>0)); 

  /* Define the chart area */ 
 $Test->setGraphArea(60,50,$WIDTH-50,$HEIGH-50); 

 /* Draw the scale */ 
 $AxisBoundaries = array(0=>array("Min"=>0,"Max"=>100));
 $ScaleSettings  = array("Mode"=>SCALE_MODE_MANUAL,"ManualScale"=>$AxisBoundaries,"Floating"=>TRUE,"CycleBackground"=>TRUE,"DrawSubTicks"=>TRUE,"DrawArrows"=>TRUE,"ArrowSize"=>6,"XMargin"=>0,"YMargin"=>0,"GridR"=>180,"GridG"=>180,"GridB"=>180);
 $Test->drawScale($ScaleSettings);




/* Turn on Antialiasing */ 
 $Test->Antialias = TRUE; 

 /* Write the chart legend */ 
 $Test->drawLegend($WIDTH-100,50,array("Style"=>LEGEND_NOBORDER,"Mode"=>LEGEND_VERTICAL)); 

 /* Enable shadow computing */ 
 $Test->setShadow(TRUE,array("X"=>2,"Y"=>2,"R"=>0,"G"=>0,"B"=>0,"Alpha"=>10));

 /* Draw the area chart */ 
  $DataSet->setSerieDrawable("%peak",FALSE); 

  $Test->drawStackedAreaChart(array("DrawPlot"=>FALSE,"DrawLine"=>TRUE,"LineSurrounding"=>-20,));

  $DataSet->setSerieDrawable("%usr",FALSE); 
  $DataSet->setSerieDrawable("%sys",FALSE); 
  $DataSet->setSerieDrawable("%wio",FALSE); 
  $DataSet->setSerieDrawable("%peak",TRUE); 
  //$DataSet->setSerieDrawable("%aver",TRUE); 

 //$Test->drawLineChart(); 
 $Test->drawSplineChart(); 

  /* Write some text */ 
 $Test->setFontProperties(array("FontName"=>"pChart2.1.3/fonts/verdana.ttf","FontSize"=>4));
 $TextSettings = array("DrawBox"=>TRUE,"BoxRounded"=>TRUE,"R"=>0,"G"=>0,"B"=>0,"Angle"=>0,"FontSize"=>10);
 $SUMMARY="Peak=".$DataSet->getMax("%peak")."\nAvg=".round($DataSet->getSerieAverage("%usr")+$DataSet->getSerieAverage("%sys"+$DataSet->getSerieAverage("%wio")),2);
 $Test->drawText(70,100,$SUMMARY,$TextSettings);


 /* Render the picture (choose the best way) */ 
 $Test->Render("$PATH/$HOST.$MONTH.$YEAR.utilize.png"); 

//////////////////////  aversar

  // Dataset definition 
  $DataSet = new pData;
  $DataSet->importFromCSV("$PATH/$HOST.$MONTH.$YEAR.aversar.out",array("Delimiter"=>"\t","GotHeader"=>TRUE,"SkipColumns"=>array(4,6)));
  $DataSet->setAxisName(0,"CPU performance");
  
  /* Bind a data serie to the X axis */
  $DataSet->setAbscissa("time");


  // Initialise the graph
  $Test = new pImage($WIDTH,$HEIGH,$DataSet);

  /* Draw the background */ 
 //$Settings = array("R"=>170, "G"=>183, "B"=>87, "Dash"=>1, "DashR"=>190, "DashG"=>203, "DashB"=>107); 
 //$Test->drawFilledRectangle(0,0,$WIDTH,$HEIGH,$Settings); 

 /* Overlay with a gradient */ 
 $Test->drawGradientArea(0,0,$WIDTH,$HEIGH,DIRECTION_VERTICAL,array("StartR"=>220,"StartG"=>220,"StartB"=>220,"EndR"=>255,"EndG"=>255,"EndB"=>255,"Alpha"=>100));


  /* Add a border to the picture */ 
 $Test->drawRectangle(0,0,$WIDTH-1,$HEIGH-1,array("R"=>100,"G"=>100,"B"=>100));
  
 /* Write the chart title */  
 $Test->setFontProperties(array("FontName"=>"pChart2.1.3/fonts/Forgotte.ttf","FontSize"=>11));
 $Test->drawText($WIDTH/2,35,"CPU utilize by time at $MONTH-$YEAR on $HOST",array("FontSize"=>20,"Align"=>TEXT_ALIGN_MIDDLEMIDDLE));

 /* Set the default font */ 
 $Test->setFontProperties(array("FontName"=>"pChart2.1.3/fonts/verdana.ttf","FontSize"=>7,"R"=>0,"G"=>0,"B"=>0)); 

  /* Define the chart area */ 
 $Test->setGraphArea(60,50,$WIDTH-50,$HEIGH-50); 

 /* Draw the scale */ 
 $AxisBoundaries = array(0=>array("Min"=>0,"Max"=>100));
 $ScaleSettings  = array("Mode"=>SCALE_MODE_MANUAL,"ManualScale"=>$AxisBoundaries,"Floating"=>TRUE,"CycleBackground"=>TRUE,"DrawSubTicks"=>TRUE,"DrawArrows"=>TRUE,"ArrowSize"=>6,"XMargin"=>0,"YMargin"=>0,"LabelRotation"=>45,"LabelSkip"=>6,"GridR"=>180,"GridG"=>180,"GridB"=>180);
 $Test->drawScale($ScaleSettings);

/* Turn on Antialiasing */ 
 $Test->Antialias = TRUE; 

 /* Write the chart legend */ 
 $Test->drawLegend($WIDTH-100,50,array("Style"=>LEGEND_NOBORDER,"Mode"=>LEGEND_VERTICAL)); 

 /* Enable shadow computing */ 
 $Test->setShadow(TRUE,array("X"=>2,"Y"=>2,"R"=>0,"G"=>0,"B"=>0,"Alpha"=>10));

 /* Draw the area chart */ 
  $DataSet->setSerieDrawable("%peak",FALSE); 

  $Test->drawStackedAreaChart(array("DrawPlot"=>FALSE,"DrawLine"=>TRUE,"LineSurrounding"=>-20,));

  $DataSet->setSerieDrawable("%usr",FALSE); 
  $DataSet->setSerieDrawable("%sys",FALSE); 
  $DataSet->setSerieDrawable("%wio",FALSE); 
  $DataSet->setSerieDrawable("%peak",TRUE); 

 $Test->drawSplineChart(); 

  /* Write some text */ 
 $Test->setFontProperties(array("FontName"=>"pChart2.1.3/fonts/verdana.ttf","FontSize"=>4));
 $TextSettings = array("DrawBox"=>TRUE,"BoxRounded"=>TRUE,"R"=>0,"G"=>0,"B"=>0,"Angle"=>0,"FontSize"=>10);
 $SUMMARY="Peak=".$DataSet->getMax("%peak")."\nAvg=".round($DataSet->getSerieAverage("%usr")+$DataSet->getSerieAverage("%sys")+$DataSet->getSerieAverage("%wio"),2);
 $Test->drawText(70,100,$SUMMARY,$TextSettings);


 /* Render the picture (choose the best way) */ 
 $Test->Render("$PATH/$HOST.$MONTH.$YEAR.aversar.png"); 

/////////////////////////// real cpu

  // Dataset definition 
  $DataSet = new pData;
  $DataSet->importFromCSV("$PATH/$HOST.$MONTH.$YEAR.realcpu.out",array("Delimiter"=>"\t","GotHeader"=>TRUE));
  $DataSet->setAxisName(0,"CPU performance");
  
  /* Bind a data serie to the X axis */
  $DataSet->setAbscissa("time");
  //print_r($DataSet->getData());


  // Initialise the graph
  $Test = new pImage($WIDTH,$HEIGH,$DataSet);

  /* Draw the background */ 
 $Test->drawFilledRectangle(60,40,$WIDTH,$HEIGH,array("R"=>255,"G"=>255,"B"=>255,"Surrounding"=>-200,"Alpha"=>10));



 /* Overlay with a gradient */ 
 $Test->drawGradientArea(0,0,$WIDTH,$HEIGH,DIRECTION_VERTICAL,array("StartR"=>220,"StartG"=>220,"StartB"=>220,"EndR"=>255,"EndG"=>255,"EndB"=>255,"Alpha"=>100));



  /* Add a border to the picture */ 
 $Test->drawRectangle(0,0,$WIDTH-1,$HEIGH-1,array("R"=>100,"G"=>100,"B"=>100));

  
 /* Write the chart title */  
 $Test->setFontProperties(array("FontName"=>"pChart2.1.3/fonts/Forgotte.ttf","FontSize"=>11));
 $Test->drawText($WIDTH/2,35,"CPU utilize everyday at $MONTH-$YEAR on $HOST",array("FontSize"=>20,"Align"=>TEXT_ALIGN_MIDDLEMIDDLE));


 /* Set the default font */ 
 $Test->setFontProperties(array("FontName"=>"pChart2.1.3/fonts/verdana.ttf","FontSize"=>7,"R"=>0,"G"=>0,"B"=>0)); 

  /* Define the chart area */ 
 $Test->setGraphArea(60,50,$WIDTH-50,$HEIGH-50); 

 /* Draw the scale */ 
 $AxisBoundaries = array(0=>array("Min"=>0,"Max"=>100));
 $ScaleSettings  = array("Mode"=>SCALE_MODE_MANUAL,"ManualScale"=>$AxisBoundaries,"Floating"=>TRUE,"CycleBackground"=>TRUE,"DrawSubTicks"=>TRUE,"DrawArrows"=>TRUE,"ArrowSize"=>6,"XMargin"=>0,"YMargin"=>0,"LabelRotation"=>45,"LabelSkip"=>6,"GridR"=>180,"GridG"=>180,"GridB"=>180);
 $Test->drawScale($ScaleSettings);

/* Turn on Antialiasing */ 
 $Test->Antialias = TRUE; 

 /* Write the chart legend */ 
 $Test->drawLegend($WIDTH-50,10,array("Style"=>LEGEND_NOBORDER,"Mode"=>LEGEND_VERTICAL,"FontSize"=>4)); 

 /* Enable shadow computing */ 
 $Test->setShadow(TRUE,array("X"=>2,"Y"=>2,"R"=>0,"G"=>0,"B"=>0,"Alpha"=>10));

 $Test->drawLineChart(); 
 $Test->drawThresholdArea(70,90,array("R"=>255,"G"=>255,"B"=>55,"Alpha"=>20,"Border"=>TRUE,"BorderTicks"=>2));
 $Test->drawThresholdArea(90,100,array("R"=>255,"G"=>20,"B"=>20,"Alpha"=>20,"Border"=>TRUE,"BorderTicks"=>2));

/////////////////////// search for max position

 $LabelSettings = array("TitleMode"=>LABEL_TITLE_BACKGROUND,"DrawSerieColor"=>TRUE,"TitleR"=>255,"TitleG"=>255,"TitleB"=>255);
 $Data = $DataSet->getData();
 foreach($Data["Series"] as $SerieName => $Serie)
  {
    $Lines = preg_split("/\n/",$Serie["Description"]);
    foreach($Lines as $Key => $Value)
      {
       if ($Value != $DataSet->Data["Abscissa"]){
          $mypeak=$DataSet->getMax($Value);
         if ($mypeak >= 70 ) 
          {
          $mykey=array_search($mypeak,$DataSet->getValues($Value));
          $Test->writeLabel($Value,$mykey,$LabelSettings);
         //printf("max = %s,%s series = %s key = %s \n",$DataSet->getMax($Value),$DataSet->getValueAt($Value,$mykey),$Value,$mykey);
          }
       }
     }
  }

///////////////////////////////////////

 /* Render the picture (choose the best way) */ 
 $Test->Render("$PATH/$HOST.$MONTH.$YEAR.realcpu.png"); 

}
 ?>

